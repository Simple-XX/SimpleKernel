
// This file is a part of Simple-XX/SimpleKernel
// (https://github.com/Simple-XX/SimpleKernel).
//
// vector for Simple-XX/SimpleKernel.

#ifndef _VECTOR_
#define _VECTOR_

// #include <algorithm>
#include "type_traits"
#include "TypeTraits.h"
#include "Allocator.hpp"
#include "Algorithm.hpp"
#include "Iterator.hpp"
#include "ReverseIterator.hpp"
#include "UninitializedFunctions.hpp"
#include "cassert.h"

namespace STL {
    //********* vector *************
    template <class T, class Alloc = allocator<T>>
    class vector {
    public:
        typedef T  value_type;
        typedef T *iterator;
        // typedef const iterator
        // const_iterator;
        typedef const T *                     const_iterator;
        typedef reverse_iterator_t<T *>       reverse_iterator;
        typedef reverse_iterator_t<const T *> const_reverse_iterator;
        typedef iterator                      pointer;
        typedef T &                           reference;
        typedef const T &                     const_reference;
        typedef size_t                        size_type;
        typedef ptrdiff_t                     difference_type;

    private:
        T *start_;
        T *finish_;
        T *endOfStorage_;

        typedef Alloc dataAllocator;

        void destroyAndDeallocateAll();
        void allocateAndFillN(const size_type n, const value_type &value);
        template <class InputIterator>
        void allocateAndCopy(InputIterator first, InputIterator last);

        template <class InputIterator>
        void vector_aux(InputIterator first, InputIterator last,
                        std::false_type);
        template <class Integer>
        void vector_aux(Integer n, const value_type &value, std::true_type);
        template <class InputIterator>
        void insert_aux(iterator position, InputIterator first,
                        InputIterator last, std::false_type);
        template <class Integer>
        void insert_aux(iterator position, Integer n, const value_type &value,
                        std::true_type);
        template <class InputIterator>
        void      reallocateAndCopy(iterator position, InputIterator first,
                                    InputIterator last);
        void      reallocateAndFillN(iterator position, const size_type &n,
                                     const value_type &val);
        size_type getNewCapacity(size_type len) const;

    public:
        //���죬���ƣ�������غ���
        vector() : start_(0), finish_(0), endOfStorage_(0) {
        }
        explicit vector(const size_type n);
        vector(const size_type n, const value_type &value);
        template <class InputIterator>
        vector(InputIterator first, InputIterator last);
        vector(const vector &v);
        vector(vector &&v);
        vector &operator=(const vector &v);
        vector &operator=(vector &&v);
        ~vector();

        //�Ƚϲ������
        bool operator==(const vector &v) const;
        bool operator!=(const vector &v) const;

        //���������
        iterator begin() {
            return (start_);
        }
        const_iterator begin() const {
            return (start_);
        }
        const_iterator cbegin() const {
            return (start_);
        }
        iterator end() {
            return (finish_);
        }
        const_iterator end() const {
            return (finish_);
        }
        const_iterator cend() const {
            return (finish_);
        }
        reverse_iterator rbegin() {
            return reverse_iterator(finish_);
        }
        const_reverse_iterator crbegin() const {
            return const_reverse_iterator(finish_);
        }
        reverse_iterator rend() {
            return reverse_iterator(start_);
        }
        const_reverse_iterator crend() const {
            return const_reverse_iterator(start_);
        }

        //���������
        difference_type size() const {
            return finish_ - start_;
        }
        difference_type capacity() const {
            return endOfStorage_ - start_;
        }
        bool empty() const {
            return start_ == finish_;
        }
        void resize(size_type n, value_type val = value_type());
        void reserve(size_type n);
        void shrink_to_fit();

        //����Ԫ�����
        reference operator[](const difference_type i) {
            return *(begin() + i);
        }
        const_reference operator[](const difference_type i) const {
            return *(cbegin() + i);
        }
        reference front() {
            return *(begin());
        }
        reference back() {
            return *(end() - 1);
        }
        pointer data() {
            return start_;
        }

        //�޸�������صĲ���
        //������������������е����ж���ʹ������sizeΪ0�����������������еĿռ�
        void     clear();
        void     swap(vector &v);
        void     push_back(const value_type &value);
        void     pop_back();
        iterator insert(iterator position, const value_type &val);
        void     insert(iterator position, const size_type &n,
                        const value_type &val);
        template <class InputIterator>
        void insert(iterator position, InputIterator first, InputIterator last);
        iterator erase(iterator position);
        iterator erase(iterator first, iterator last);

        Alloc get_allocator() {
            //     return dataAllocator;
        }

        template <class U, class Alloc1>
        friend bool operator==(const vector<U, Alloc1> &v1,
                               const vector<U, Alloc1> &v2);
        template <class U, class Alloc1>
        friend bool operator!=(const vector<U, Alloc1> &v1,
                               const vector<U, Alloc1> &v2);
    };

    //***********************���죬���ƣ��������***********************
    template <class T, class Alloc>
    vector<T, Alloc>::~vector() {
        destroyAndDeallocateAll();
    }
    template <class T, class Alloc>
    vector<T, Alloc>::vector(const size_type n) {
        allocateAndFillN(n, value_type());
    }
    template <class T, class Alloc>
    vector<T, Alloc>::vector(const size_type n, const value_type &value) {
        allocateAndFillN(n, value);
    }
    template <class T, class Alloc>
    template <class InputIterator>
    vector<T, Alloc>::vector(InputIterator first, InputIterator last) {
        //����ָ������ּ������ĺ���
        vector_aux(first, last,
                   typename std::is_integral<InputIterator>::type());
    }
    template <class T, class Alloc>
    vector<T, Alloc>::vector(const vector &v) {
        allocateAndCopy(v.start_, v.finish_);
    }
    template <class T, class Alloc>
    vector<T, Alloc>::vector(vector &&v) {
        start_        = v.start_;
        finish_       = v.finish_;
        endOfStorage_ = v.endOfStorage_;
        v.start_ = v.finish_ = v.endOfStorage_ = 0;
    }
    template <class T, class Alloc>
    vector<T, Alloc> &vector<T, Alloc>::operator=(const vector &v) {
        if (this != &v) {
            allocateAndCopy(v.start_, v.finish_);
        }
        return *this;
    }
    template <class T, class Alloc>
    vector<T, Alloc> &vector<T, Alloc>::operator=(vector &&v) {
        if (this != &v) {
            destroyAndDeallocateAll();
            start_        = v.start_;
            finish_       = v.finish_;
            endOfStorage_ = v.endOfStorage_;
            v.start_ = v.finish_ = v.endOfStorage_ = 0;
        }
        return *this;
    }
    //*************���������������******************************
    template <class T, class Alloc>
    void vector<T, Alloc>::resize(size_type n, value_type val) {
        if (n < size()) {
            dataAllocator::destroy(start_ + n, finish_);
            finish_ = start_ + n;
        }
        else if (n > size() && n <= capacity()) {
            auto lengthOfInsert = n - size();
            finish_ = STL::uninitialized_fill_n(finish_, lengthOfInsert, val);
        }
        else if (n > capacity()) {
            auto lengthOfInsert = n - size();
            T *  newStart =
                dataAllocator::allocate(getNewCapacity(lengthOfInsert));
            T *newFinish = STL::uninitialized_copy(begin(), end(), newStart);
            newFinish =
                STL::uninitialized_fill_n(newFinish, lengthOfInsert, val);

            destroyAndDeallocateAll();
            start_        = newStart;
            finish_       = newFinish;
            endOfStorage_ = start_ + n;
        }
    }
    template <class T, class Alloc>
    void vector<T, Alloc>::reserve(size_type n) {
        if (n <= capacity())
            return;
        T *newStart  = dataAllocator::allocate(n);
        T *newFinish = STL::uninitialized_copy(begin(), end(), newStart);
        destroyAndDeallocateAll();

        start_        = newStart;
        finish_       = newFinish;
        endOfStorage_ = start_ + n;
    }
    //***************�޸���������ز���**************************
    template <class T, class Alloc>
    typename vector<T, Alloc>::iterator
    vector<T, Alloc>::erase(iterator position) {
        return erase(position, position + 1);
    }
    template <class T, class Alloc>
    typename vector<T, Alloc>::iterator vector<T, Alloc>::erase(iterator first,
                                                                iterator last) {
        //β������������
        difference_type lenOfTail = end() - last;
        //ɾȥ�Ķ�����Ŀ
        difference_type lenOfRemoved = last - first;
        finish_                      = finish_ - lenOfRemoved;
        for (; lenOfTail != 0; --lenOfTail) {
            auto temp = (last - lenOfRemoved);
            *temp     = *(last++);
        }
        return (first);
    }
    template <class T, class Alloc>
    template <class InputIterator>
    void vector<T, Alloc>::reallocateAndCopy(iterator      position,
                                             InputIterator first,
                                             InputIterator last) {
        difference_type newCapacity = getNewCapacity(last - first);

        T *newStart        = dataAllocator::allocate(newCapacity);
        T *newEndOfStorage = newStart + newCapacity;
        T *newFinish = STL::uninitialized_copy(begin(), position, newStart);
        newFinish    = STL::uninitialized_copy(first, last, newFinish);
        newFinish    = STL::uninitialized_copy(position, end(), newFinish);

        destroyAndDeallocateAll();
        start_        = newStart;
        finish_       = newFinish;
        endOfStorage_ = newEndOfStorage;
    }
    template <class T, class Alloc>
    void vector<T, Alloc>::reallocateAndFillN(iterator          position,
                                              const size_type & n,
                                              const value_type &val) {
        difference_type newCapacity = getNewCapacity(n);

        T *newStart        = dataAllocator::allocate(newCapacity);
        T *newEndOfStorage = newStart + newCapacity;
        T *newFinish = STL::uninitialized_copy(begin(), position, newStart);
        newFinish    = STL::uninitialized_fill_n(newFinish, n, val);
        newFinish    = STL::uninitialized_copy(position, end(), newFinish);

        destroyAndDeallocateAll();
        start_        = newStart;
        finish_       = newFinish;
        endOfStorage_ = newEndOfStorage;
    }

    template <class T, class Alloc>
    template <class InputIterator>
    void vector<T, Alloc>::insert_aux(iterator position, InputIterator first,
                                      InputIterator last, std::false_type) {
        difference_type locationLeft =
            endOfStorage_ - finish_; // the size of left storage
        difference_type locationNeed = distance(first, last); // last - first;

        if (locationLeft >= locationNeed) {
            if (finish_ - position > locationNeed) {
                STL::uninitialized_copy(finish_ - locationNeed, finish_,
                                        finish_);
                // std::copy_backward(position, finish_ - locationNeed,
                // finish_); std::copy(first, last, position);
                copy_backward(position, finish_ - locationNeed, finish_);
                copy(first, last, position);
            }
            else {
                iterator temp = STL::uninitialized_copy(
                    first + (finish_ - position), last, finish_);
                STL::uninitialized_copy(position, finish_, temp);
                // std::copy(first, first + (finish_ - position), position);
                copy(first, first + (finish_ - position), position);
            }
            finish_ += locationNeed;
        }
        else {
            reallocateAndCopy(position, first, last);
        }
    }
    template <class T, class Alloc>
    template <class Integer>
    void vector<T, Alloc>::insert_aux(iterator position, Integer n,
                                      const value_type &value, std::true_type) {
        assert(n != 0);
        difference_type locationLeft =
            endOfStorage_ - finish_; // the size of left storage
        difference_type locationNeed = n;

        if (locationLeft >= locationNeed) {
            auto tempPtr = end() - 1;
            for (; tempPtr - position >= 0;
                 --tempPtr) { // move the [position, finish_) back
                //*(tempPtr + locationNeed) = *tempPtr;//bug
                construct(tempPtr + locationNeed, *tempPtr);
            }
            STL::uninitialized_fill_n(position, n, value);
            finish_ += locationNeed;
        }
        else {
            reallocateAndFillN(position, n, value);
        }
    }
    template <class T, class Alloc>
    template <class InputIterator>
    void vector<T, Alloc>::insert(iterator position, InputIterator first,
                                  InputIterator last) {
        insert_aux(position, first, last,
                   typename std::is_integral<InputIterator>::type());
    }
    template <class T, class Alloc>
    void vector<T, Alloc>::insert(iterator position, const size_type &n,
                                  const value_type &val) {
        insert_aux(position, n, val,
                   typename std::is_integral<size_type>::type());
    }
    template <class T, class Alloc>
    typename vector<T, Alloc>::iterator
    vector<T, Alloc>::insert(iterator position, const value_type &val) {
        const auto index = position - begin();
        insert(position, 1, val);
        return begin() + index;
    }
    template <class T, class Alloc>
    void vector<T, Alloc>::push_back(const value_type &value) {
        insert(end(), value);
    }
    //***********�߼��Ƚϲ������*******************
    template <class T, class Alloc>
    bool vector<T, Alloc>::operator==(const vector &v) const {
        if (size() != v.size()) {
            return false;
        }
        else {
            auto ptr1 = start_;
            auto ptr2 = v.start_;
            for (; ptr1 != finish_ && ptr2 != v.finish_; ++ptr1, ++ptr2) {
                if (*ptr1 != *ptr2)
                    return false;
            }
            return true;
        }
    }
    template <class T, class Alloc>
    bool vector<T, Alloc>::operator!=(const vector &v) const {
        return !(*this == v);
    }
    template <class T, class Alloc>
    bool operator==(const vector<T, Alloc> &v1, const vector<T, Alloc> &v2) {
        // return v1 == v2;
        return v1.operator==(v2);
    }
    template <class T, class Alloc>
    bool operator!=(const vector<T, Alloc> &v1, const vector<T, Alloc> &v2) {
        return !(v1 == v2);
    }
    template <class T, class Alloc>
    void vector<T, Alloc>::shrink_to_fit() {
        // dataAllocator::deallocate(finish_, endOfStorage_ - finish_);
        // endOfStorage_ = finish_;
        T *t    = (T *)dataAllocator::allocate(size());
        finish_ = STL::uninitialized_copy(start_, finish_, t);
        dataAllocator::deallocate(start_, capacity());
        start_        = t;
        endOfStorage_ = finish_;
    }
    template <class T, class Alloc>
    void vector<T, Alloc>::clear() {
        dataAllocator::destroy(start_, finish_);
        finish_ = start_;
    }
    template <class T, class Alloc>
    void vector<T, Alloc>::swap(vector &v) {
        if (this != &v) {
            STL::swap(start_, v.start_);
            STL::swap(finish_, v.finish_);
            STL::swap(endOfStorage_, v.endOfStorage_);
        }
    }
    template <class T, class Alloc>
    void vector<T, Alloc>::pop_back() {
        --finish_;
        dataAllocator::destroy(finish_);
    }
    template <class T, class Alloc>
    void vector<T, Alloc>::destroyAndDeallocateAll() {
        if (capacity() != 0) {
            dataAllocator::destroy(start_, finish_);
            dataAllocator::deallocate(start_, capacity());
        }
    }
    template <class T, class Alloc>
    void vector<T, Alloc>::allocateAndFillN(const size_type   n,
                                            const value_type &value) {
        start_ = dataAllocator::allocate(n);
        STL::uninitialized_fill_n(start_, n, value);
        finish_ = endOfStorage_ = start_ + n;
    }
    template <class T, class Alloc>
    template <class InputIterator>
    void vector<T, Alloc>::allocateAndCopy(InputIterator first,
                                           InputIterator last) {
        start_        = dataAllocator::allocate(last - first);
        finish_       = STL::uninitialized_copy(first, last, start_);
        endOfStorage_ = finish_;
    }
    template <class T, class Alloc>
    template <class InputIterator>
    void vector<T, Alloc>::vector_aux(InputIterator first, InputIterator last,
                                      std::false_type) {
        allocateAndCopy(first, last);
    }
    template <class T, class Alloc>
    template <class Integer>
    void vector<T, Alloc>::vector_aux(Integer n, const value_type &value,
                                      std::true_type) {
        allocateAndFillN(n, value);
    }
    template <class T, class Alloc>
    typename vector<T, Alloc>::size_type
    vector<T, Alloc>::getNewCapacity(size_type len) const {
        size_type oldCapacity = endOfStorage_ - start_;
        auto      res         = STL::max(oldCapacity, len);
        size_type newCapacity = (oldCapacity != 0 ? (oldCapacity + res) : len);
        return newCapacity;
    }

}

#endif /* _VECTOR_ */
