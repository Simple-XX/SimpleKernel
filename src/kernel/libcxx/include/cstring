
/**
 * @file cstring
 * @brief cstring 定义
 * @author Zone.N (Zone.Niuzh@hotmail.com)
 * @version 1.0
 * @date 2023-05-08
 * @copyright MIT LICENSE
 * https://github.com/Simple-XX/SimpleKernel
 * @par change log:
 * <table>
 * <tr><th>Date<th>Author<th>Description
 * <tr><td>2023-05-08<td>Zone.N<td>创建文件
 * </table>
 */

#ifndef SIMPLEKERNEL_SRC_KERNEL_LIBCXX_INCLUDE_CSTRING
#define SIMPLEKERNEL_SRC_KERNEL_LIBCXX_INCLUDE_CSTRING

#include <cstdint>

extern "C" {
// 复制内存块
inline void *memcpy(void *dest, const void *src, size_t n) {
  return __builtin_memcpy(dest, src, n);
}

// 复制内存块，可以处理重叠区域。
inline void *memmove(void *dest, const void *src, size_t n) {
  return __builtin_memmove(dest, src, n);
}

// 设置内存块
inline void *memset(void *s, int c, size_t n) { return __builtin_memset(s, c, n); }

// 比较内存块
inline int memcmp(const void *s1, const void *s2, size_t n) {
  return __builtin_memcmp(s1, s2, n);
}

// 复制字符串
inline char *strcpy(char *dest, const char *src) {
  return __builtin_strcpy(dest, src);
}

// 复制指定长度的字符串
inline char *strncpy(char *dest, const char *src, size_t n) {
  return __builtin_strncpy(dest, src, n);
}

// 连接字符串
inline char *strcat(char *dest, const char *src) {
  return __builtin_strcat(dest, src);
}

// 连接指定长度的字符串
inline char *strncat(char *dest, const char *src, size_t n) {
  return __builtin_strncat(dest, src, n);
}

// 比较字符串
inline int strcmp(const char *s1, const char *s2) { return __builtin_strcmp(s1, s2); }

// 比较指定长度的字符串
inline int strncmp(const char *s1, const char *s2, size_t n) {
  return __builtin_strncmp(s1, s2, n);
}

// 获取字符串长度
inline size_t strlen(const char *s) { return __builtin_strlen(s); }

// 查找字符在字符串中的首次出现
inline char *strchr(const char *s, int c) { return __builtin_strchr(s, c); }

// 查找字符在字符串中的最后一次出现
inline char *strrchr(const char *s, int c) { return __builtin_strrchr(s, c); }

// 计算字符串中连续出现的指定字符的长度
inline size_t strspn(const char *s, const char *accept) {
  return __builtin_strspn(s, accept);
}

// 计算字符串中不含指定字符的长度
inline size_t strcspn(const char *s, const char *reject) {
  return __builtin_strcspn(s, reject);
}

// 查找字符串中任意一个指定字符的首次出现
inline char *strpbrk(const char *s, const char *accept) {
  return __builtin_strpbrk(s, accept);
}

// 查找子字符串
inline char *strstr(const char *haystack, const char *needle) {
  return __builtin_strstr(haystack, needle);
}
}

namespace std {

using ::memcpy;
using ::memmove;
using ::memset;
using ::memcmp;
using ::strcpy;
using ::strncpy;
using ::strcat;
using ::strncat;
using ::strcmp;
using ::strncmp;
using ::strlen;
using ::strchr;
using ::strrchr;
using ::strspn;
using ::strcspn;
using ::strpbrk;
using ::strstr;



};  // namespace std

#endif /* SIMPLEKERNEL_SRC_KERNEL_LIBCXX_INCLUDE_CSTRING */
